// BASE COMMANDS

DEFINE_INSTR
(
    EXIT, 0x0,
    {
        return;
    }
)

// ARITHMETIC COMMANDS

DEFINE_INSTR
(
    ADD, 0x1,
    {
        RD_I_ASSIGN(RS1_I() + RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SUB, 0x2,
    {
        RD_I_ASSIGN(RS1_I() - RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    MUL, 0x3,
    {
        RD_I_ASSIGN(RS1_I() * RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)
DEFINE_INSTR
(
    DIV, 0x4,
    {
        RD_I_ASSIGN(RS1_I() / RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    ADDF, 0x5,
    {
        RD_F_ASSIGN(RS1_F() + RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SUBF, 0x6,
    {
        RD_F_ASSIGN(RS1_F() - RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    MULF, 0x7,
    {
        RD_F_ASSIGN(RS1_F() * RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    DIVF, 0x8,
    {
        RD_F_ASSIGN(RS1_F() / RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    AND, 0x9,
    {
        RD_I_ASSIGN(RS1_I() & RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    OR, 0xa,
    {
        RD_I_ASSIGN(RS1_I() | RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    XOR, 0xb,
    {
        RD_I_ASSIGN(RS1_I() ^ RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

// MOV COMMANDS

DEFINE_INSTR
(
    MOV, 0xc,
    {
        RD_I_ASSIGN(RS1_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    MOVIF, 0xd,
    {
        RD_I_ASSIGN(IMM_I());
        PC_ADD(0xc); // 0xc bytes per instruction, not branch instruction
    }
)
// COMPARISON COMMANDS

DEFINE_INSTR
(
    SLTI, 0xe,
    {
        RD_I_ASSIGN(RS1_I() < RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SMEI, 0xf,
    {
        RD_I_ASSIGN(RS1_I() >= RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SLTF, 0x10,
    {
        RD_I_ASSIGN(RS1_F() < RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SMEF, 0x11,
    {
        RD_I_ASSIGN(RS1_F() >= RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    EQI, 0x12,
    {
        RD_I_ASSIGN(RS1_I() == RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    NEQI, 0x13,
    {
        RD_I_ASSIGN(RS1_I() != RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    EQF, 0x14,
    {
        RD_I_ASSIGN(RS1_F() == RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    NEQF, 0x15,
    {
        RD_I_ASSIGN(RS1_F() != RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    CONVIF, 0x16,
    {
        RD_F_ASSIGN(static_cast<double>(RS1_I()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    CONVFI, 0x17,
    {
        RD_I_ASSIGN(static_cast<int64_t>(RS1_F()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    PRINTI, 0x18,
    {
        printf("%ld\n", RS1_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    PRINTF, 0x19,
    {
        printf("%lf\n", RS1_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SCANI, 0x1a,
    {
        int64_t __tmp {0};
        scanf("%ld", &__tmp);
        RD_I_ASSIGN(__tmp);

        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SCANF, 0x1b,
    {
        double __tmp {0.0};
        scanf("%lf", &__tmp);
        RD_F_ASSIGN(__tmp);

        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SIN, 0x1c,
    {
        RD_F_ASSIGN(std::sin(RS1_F()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    COS, 0x1d,
    {
        RD_F_ASSIGN(std::cos(RS1_F()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    POWER, 0x1e,
    {
        RD_F_ASSIGN(std::pow(RS1_F(), RS2_F()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    JMP, 0x1f,
    {
        PC_ASSIGN(RS1_I()); // branch instruction
    }
)

DEFINE_INSTR
(
    JMP_REL, 0x20,
    {
        PC_ADD(RS1_I()); // branch instruction
    }
)

DEFINE_INSTR
(
    JMP_IMM, 0x21,
    {
        PC_ADD(IMM_I32()); // branch instruction
    }
)

DEFINE_INSTR
(
    JMP_IF, 0x22,
    {
        if (RS1_I()) {
            PC_ADD(RS2_I()); // true
        }
        else {
            PC_ADD(0x4); // false
        }
    }
)

DEFINE_INSTR
(
    JMP_IF_IMM, 0x23,
    {
        if (RS1_I()) {
            PC_ADD(IMM_I32()); // true
        }
        else {
            PC_ADD(0x8); // false
        }
    }
)

DEFINE_INSTR
(
    CALL, 0x24,
    {
        FRAME_NEW_MIGRATE(PC() + 0x8, RS1_I());
    }
)

DEFINE_INSTR
(
    RET, 0x25,
    {
        FRAME_OLD_MIGRATE();
    }
)

DEFINE_INSTR
(
    ACCR, 0x26,
    {
        RD_I_ASSIGN(GET_I_ACCUM());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    RACC, 0x27,
    {
        PUT_I_ACCUM(RS1_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

// =============================== Array operations ================================

DEFINE_INSTR
(
    /// newarr rd, type, size
    /// pseudo: new type(size)
    /// TODO: Add object/str/array types additionally to primitive ones
    /// TODO: refactore implementation
    NEWARR, 0x28,
    {
        RD_I_ASSIGN(HandleCreateArrayObject(GET_ARRAY_TYPE(), IMM_I32()));
        PC_ADD(0x8); // 0x8 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// larr rd, rs1(ptr), rs2(idx)
    /// pseudo: rd = ptr[idx]
    /// Load element from array to register
    /// TODO: refactore implementation
    LARR, 0x29,
    {
        RD_I_ASSIGN(HandleLoadFromArray(RS1_I(), RS2_I()));
        PC_ADD(0x4);// 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// starr rs1(ptr), rs2(idx), rs3(src_reg_idx)
    /// val = registers[src_reg_idx]
    /// pseudo: ptr[idx] = val
    /// Store element from register to array
    /// TODO: refactore implementation
    STARR, 0x2a,
    {
        HandleStoreToArray(RS1_I(), RS2_I(), RS3_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

// =============================== String operations ===============================

DEFINE_INSTR
(
    /// Put offset in string-pool to register
    STR_IMMUT, 0x2b,
    {
        RD_I_ASSIGN(IMM_I32());
        PC_ADD(0x8); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// newstr rd(ptr), imm(str_offset)
    /// Create string-object from offset in string-pool, put ptr to register
    NEWSTR, 0x2c,
    {
        RD_I_ASSIGN(HandleCreateStringObject(IMM_I32()));
        PC_ADD(0x8); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// strconcat rd, rs1, rs2
    /// Create new string-object with concatenated string
    STRCONCAT, 0x2d,
    {
        RD_I_ASSIGN(HandleStringConcatenation(RS1_I(), RS2_I()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// strcmp rd, rs1, rs2
    /// Compare two strings
    /// Return value:
    /// Negative value if rs1 appears before rs2 in lexicographical order.
    /// Zero if rs1 and rs2 compare equal.
    /// Positive value if rs1 appears rs2 rhs in lexicographical order.    
    STRCMP, 0x2e,
    {
        RD_I_ASSIGN(HandleStringComparison(RS1_I(), RS2_I()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// print_str rs1(ptr)
    /// Print string-object
    PRINT_STR, 0x2f,
    {
        HandlePrintString(RS1_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// Print immutable string from offset in string-pool
    PRINT_STR_IMMUT, 0x30,
    {
        printf("%s\n", BYTECODE_OFFSET(RS1_I()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

// ============================ Object-class operations ============================

DEFINE_INSTR
(
    /// newobj rd, rs1(offset)
    /// Create object, put ptr to register
    NEWOBJ, 0x31,
    {
        RD_I_ASSIGN(HandleCreateObject(file, GET_OBJ_TYPE()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// Put field of an object to register (by class offset)
    OBJ_GET_FIELD, 0x32,
    {
        HandleObjGetField(frame_cur_, GET_OBJ_FIELD_IDX(), GET_OBJ_OP_RS(), GET_OBJ_RS(), GET_OBJ_FIELD_TYPE());
        PC_ADD(0x6); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    /// Set field of an object from register (by class offset)
    OBJ_SET_FIELD, 0x33,
    {
        HandleObjSetField(frame_cur_, GET_OBJ_FIELD_IDX(), GET_OBJ_OP_RS(), GET_OBJ_RS(), GET_OBJ_FIELD_TYPE());
        PC_ADD(0x6); // 0x4 bytes per instruction, not branch instruction
    }
)

// =========================== General object operations ===========================

DEFINE_INSTR
(
    /// Create object, which is a copy of another object
    /// Works for objects-classes, strings, arrays
    CPOBJ, 0x34,
    {
        /// TODO: add implementation
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)
