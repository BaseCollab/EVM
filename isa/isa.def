// BASE COMMANDS

DEFINE_INSTR
(
    EXIT, 0x0,
    {
        return;
    }
)

// ARITHMETIC COMMANDS

DEFINE_INSTR
(
    ADD, 0x1,
    {
        RD_I_ASSIGN(RS1_I() + RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SUB, 0x2,
    {
        RD_I_ASSIGN(RS1_I() - RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    MUL, 0x3,
    {
        RD_I_ASSIGN(RS1_I() * RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)
DEFINE_INSTR
(
    DIV, 0x4,
    {
        RD_I_ASSIGN(RS1_I() / RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    ADDF, 0x5,
    {
        RD_F_ASSIGN(RS1_F() + RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SUBF, 0x6,
    {
        RD_F_ASSIGN(RS1_F() - RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    MULF, 0x7,
    {
        RD_F_ASSIGN(RS1_F() * RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    DIVF, 0x8,
    {
        RD_F_ASSIGN(RS1_F() / RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    AND, 0x9,
    {
        RD_I_ASSIGN(RS1_I() & RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    OR, 0xa,
    {
        RD_I_ASSIGN(RS1_I() | RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    XOR, 0xb,
    {
        RD_I_ASSIGN(RS1_I() ^ RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

// MOV COMMANDS

DEFINE_INSTR
(
    MOV, 0xc,
    {
        RD_I_ASSIGN(RS1_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    MOVIF, 0xd,
    {
        RD_I_ASSIGN(IMM_I());
        PC_ADD(0xc); // 0xc bytes per instruction, not branch instruction
    }
)
// COMPARISON COMMANDS

DEFINE_INSTR
(
    SLTI, 0xe,
    {
        RD_I_ASSIGN(RS1_I() < RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SMEI, 0xf,
    {
        RD_I_ASSIGN(RS1_I() >= RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SLTF, 0x10,
    {
        RD_I_ASSIGN(RS1_F() < RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SMEF, 0x11,
    {
        RD_I_ASSIGN(RS1_F() >= RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    EQI, 0x12,
    {
        RD_I_ASSIGN(RS1_I() == RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    NEQI, 0x13,
    {
        RD_I_ASSIGN(RS1_I() != RS2_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    EQF, 0x14,
    {
        RD_I_ASSIGN(RS1_F() == RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    NEQF, 0x15,
    {
        RD_I_ASSIGN(RS1_F() != RS2_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    CONVIF, 0x16,
    {
        RD_F_ASSIGN(static_cast<double>(RS1_I()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    CONVFI, 0x17,
    {
        RD_I_ASSIGN(static_cast<int64_t>(RS1_F()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    PRINTI, 0x18,
    {
        printf("%ld\n", RS1_I());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    PRINTF, 0x19,
    {
        printf("%lf\n", RS1_F());
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SCANI, 0x1a,
    {
        int64_t __tmp {0};
        scanf("%ld", &__tmp);
        RD_I_ASSIGN(__tmp);

        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SCANF, 0x1b,
    {
        double __tmp {0.0};
        scanf("%lf", &__tmp);
        RD_F_ASSIGN(__tmp);

        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    SIN, 0x1c,
    {
        RD_F_ASSIGN(std::sin(RS1_F()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    COS, 0x1d,
    {
        RD_F_ASSIGN(std::cos(RS1_F()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    POWER, 0x1e,
    {
        RD_F_ASSIGN(std::pow(RS1_F(), RS2_F()));
        PC_ADD(0x4); // 0x4 bytes per instruction, not branch instruction
    }
)

DEFINE_INSTR
(
    JMP, 0x1f,
    {
        PC_ASSIGN(RS1_I()); // branch instruction
    }
)

DEFINE_INSTR
(
    JMP_REL, 0x20,
    {
        PC_ADD(RS1_I()); // branch instruction
    }
)

DEFINE_INSTR
(
    JMP_IMM, 0x21,
    {
        PC_ADD(IMM_I32()); // branch instruction
    }
)

DEFINE_INSTR
(
    JMP_IF, 0x22,
    {
        if (RS1_I()) {
            PC_ADD(RS2_I()); // true
        }
        else {
            PC_ADD(0x4); // false
        }
    }
)

DEFINE_INSTR
(
    JMP_IF_IMM, 0x23,
    {
        if (RS1_I()) {
            PC_ADD(IMM_I32()); // true
        }
        else {
            PC_ADD(0x8); // false
        }
    }
)
